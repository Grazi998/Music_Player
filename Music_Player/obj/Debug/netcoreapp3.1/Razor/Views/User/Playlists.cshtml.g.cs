#pragma checksum "C:\Users\5cepr\Desktop\Projekti_GK\Music_Player\Music_Player\Views\User\Playlists.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ed2790288f3e2314b27d5b68d1981ced632c87d2"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_User_Playlists), @"mvc.1.0.view", @"/Views/User/Playlists.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\5cepr\Desktop\Projekti_GK\Music_Player\Music_Player\Views\_ViewImports.cshtml"
using Music_Player;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\5cepr\Desktop\Projekti_GK\Music_Player\Music_Player\Views\_ViewImports.cshtml"
using Music_Player.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ed2790288f3e2314b27d5b68d1981ced632c87d2", @"/Views/User/Playlists.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"fefed1c5aca093887050f5e359d92112b5622638", @"/Views/_ViewImports.cshtml")]
    public class Views_User_Playlists : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\5cepr\Desktop\Projekti_GK\Music_Player\Music_Player\Views\User\Playlists.cshtml"
  
    ViewData["Title"] = "Playlists";
    ViewBag.Title = "Playlists";

#line default
#line hidden
#nullable disable
            WriteLiteral("<h1><strong>Your playlists, ");
#nullable restore
#line 5 "C:\Users\5cepr\Desktop\Projekti_GK\Music_Player\Music_Player\Views\User\Playlists.cshtml"
                       Write(ViewBag.user);

#line default
#line hidden
#nullable disable
            WriteLiteral(@" !!! </strong></h1>
<button id=""back"" onclick=""goBack()"">GO BACK</button>
<select id=""sel"">

</select>
<button onclick=""deletePlaylist()"">Delete</button>
<button onclick=""newPlaylist()"">New Playlist</button>
<div id=""div"">

</div>

<script type=""text/javascript"">
    function goBack() {
        window.history.back();
    }
    Start();
    async function Start() {
        var uname = """);
#nullable restore
#line 22 "C:\Users\5cepr\Desktop\Projekti_GK\Music_Player\Music_Player\Views\User\Playlists.cshtml"
                Write(ViewBag.user);

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
        await axios.get(`/api/user/allplaylists/${uname}`).then(response => Show(response.data));

        document.getElementById(""sel"").addEventListener(""change"", NextPlaylist);
    }

    function newPlaylist() {
        window.location = ""/music/playlist/addnew"";
    }

    function deletePlaylist() {
        var id;
        var sel = document.getElementById(""sel"");

        for (var i = 0; i < sel.options.length; i++) {
            if (sel.options[i].selected) {
                id = sel.options[i].id;
                break;
            }
        }
        console.log(id);
        $.ajax({ url: `/api/playlist/delete/${id}`, method: ""DELETE"" }).then(response => {
            window.location.reload();
        });
    }

    function Show(data) {
        if (data.length > 0) {
            console.log(data);
            for (var i = 0; i < data.length; i++) {
                var opt = document.createElement(""option"");
                opt.textContent = data[i].title;
        ");
            WriteLiteral(@"        opt.id = data[i].id;
                document.getElementById(""sel"").appendChild(opt);
            }
            document.getElementById(""sel"").selectedIndex = 0;
            NextPlaylist();
        }
        else {
            var opt = document.createElement(""option"");
            opt.textContent = ""NaN"";
            document.getElementById(""sel"").appendChild(opt);
            document.getElementById(""div"").innerHTML = ""PLAYLIST DOESN'T EXIST!"";
        }
        


    }

    async function NextPlaylist() {
        document.getElementById(""div"").innerHTML = """";
        var id;
        var sel = document.getElementById(""sel"");
        for (var i = 0; i < sel.options.length; i++) {
            if (sel.options[i].selected) {
                id = sel.options[i].id;
                break;
            }
        }

        var data;
        await axios.get(`/api/playlist/getsongsinplaylist/${id}`).then(resp => data = resp.data);

        console.log(data);


        if (da");
            WriteLiteral(@"ta.length > 0) {
            var table = document.createElement(""table"");
            var th = document.createElement(""thead"");
            var tb = document.createElement(""tbody"");
            var trh = document.createElement(""tr"");


            Object.keys(data[0]).forEach(function (k) {
                var tdh = document.createElement(""td"");
                tdh.innerHTML = k;
                trh.appendChild(tdh);
            });

            th.appendChild(trh);;


            for (var i = 0; i < data.length; i++) {
                var tr = document.createElement(""tr"");

                var rowid = document.createElement(""td"");
                rowid.innerHTML = `${data[i].id}`;
                var rowname = document.createElement(""td"");
                rowname.innerHTML = `${data[i].name}`;
                var rowlength = document.createElement(""td"");
                rowlength.innerHTML = `${data[i].length}`;

                tr.appendChild(rowid);
                tr.appendChild");
            WriteLiteral(@"(rowname);
                tr.appendChild(rowlength);
                tb.appendChild(tr);
            }




            table.appendChild(th);
            table.appendChild(tb);

            document.getElementById(""div"").appendChild(table);
        }
        else {
            document.getElementById(""div"").innerHTML = ""PLAYLIST IS EMPTY!!!"";

        }


        
    }
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
