#pragma checksum "C:\Users\5cepr\Desktop\Projekti_GK\Music_Player\Music_Player\Views\Home\Artists.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "7e87a2de26c369bc899b675f32fbbb700b719f5a"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Artists), @"mvc.1.0.view", @"/Views/Home/Artists.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\5cepr\Desktop\Projekti_GK\Music_Player\Music_Player\Views\_ViewImports.cshtml"
using Music_Player;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\5cepr\Desktop\Projekti_GK\Music_Player\Music_Player\Views\_ViewImports.cshtml"
using Music_Player.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"7e87a2de26c369bc899b675f32fbbb700b719f5a", @"/Views/Home/Artists.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"fefed1c5aca093887050f5e359d92112b5622638", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Artists : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\5cepr\Desktop\Projekti_GK\Music_Player\Music_Player\Views\Home\Artists.cshtml"
  
    ViewData["Title"] = "allArtists";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<style>
    #artist_table {

    }
</style>
<div>
    <table id=""artist_table"">
        <thead>
            <tr>ID</tr>
            <tr>Name</tr>

        </thead>
        <tbody id=""tb"">

        </tbody>
    </table>
    <br />
    <button id=""add"">Add new</button>


</div>

<script type=""text/javascript"">


    document.getElementById(""add"").addEventListener(""click"", Add);

    function Add() {
        parent.location = ""/music/newArtist""
    }
    
    //PRIKAZ 
    function Show(data) {

        let tb = document.getElementById(""tb"");
        let rows = data.map(x => domHelper.createTableRow(x));
        console.log(rows);

        //Dohvacanje po ID-ju za brsianje
        for (let row of rows) {
            var btn = document.createElement(""button"");
            btn.innerHTML = ""Remove"";
            btn.id = `${row.children[0].textContent}`;
            btn.addEventListener(""click"", GetAllData);
            var th = document.createElement(""td"");
           ");
            WriteLiteral(@" th.appendChild(btn);
            row.appendChild(th);
            tb.appendChild(row);
        }


        
    }

    //DOHVAĆANJE SVIH PJESAMA
    function GetAllData() {
        var btnID = event.target.id;
        axios.get('/api/song').then(response => GetMatchingIDs(response.data, btnID));
        

    }

    //DOHVAĆANJE SVIH PJESAMA I TRAŽENJE ONIH KOJE NOSE TRAŽENI ID AUTORA
    function GetMatchingIDs(data, btn) {
        var dat = [];
        for (var i = 0; i < data.length; i++) {
            if (data[i].artistID == btn) {
                dat.push(data[i].id);
            }
        }
        if (dat.length > 0) {
            alert(""IF"");
            

            for (var i = 0; i < dat.length; i++) {
                GetDataPerID(dat[i], btn);
            }
        }
        else {
            alert(""ELSE"");
            RemoveArtist(btn);
        }
        
    }

    //DOHVAĆANJE ID PJESAMA TRAŽENOG AUTORA
    function GetDataPerID(id, btn) {
        ax");
            WriteLiteral(@"ios.get(`/api/song/${id}`).then(response => ChangeToNull(response.data, btn));
    }

    //STAVLJANJE POVEZNICE NA NULL
    function ChangeToNull(data, btn) {
        let song = {
            ""id"": data.id,
            ""songname"": data.name,
            ""songlength"": data.length,
            ""artist_id"": null
        }
        axios.put(""/api/song/songedit"", song).then(response => {
            window.location.reload();
        });
        RemoveArtist(btn);
    }

    //BRISANJE AUTORA
    function RemoveArtist(btn) {
        axios.delete(`/api/artist/${btn}`, btn).then(response => {
            window.location.reload();
        });
    }
    axios.get('/api/artist').then(response => Show(response.data));
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
